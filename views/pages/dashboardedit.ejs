<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('../partials/head.ejs') %>
    <style>  

      .theflex{
         min-width:100px;
         display:flex;
         justify-content:space-between;
         margin-left:20px;
         margin-right:20px;
      }   

      .theflexdiv i{
        color:#3090c6;
        margin-top:200px;
        font-size:200px;
      }

      .theflexdiv{
        width:100%; 
        text-align:center;
        background-color:white;
        border-radius:5px;
        margin-top:60px;
      }

        .profile-form-container {
            background-color: #fff;
            padding-left:20px;
            padding-right:20px;
            margin-right:20px;
            margin-left:20px;
            padding-top:20px;
            padding-bottom:20px;
            margin-top:60px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); 
            width:100%;
        }

        .profile-form .form-group {
            margin-bottom: 15px;
            text-align: left;
        }

        .profile-form .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
        }

        .profile-form .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .profile-form button {
            padding: 10px 20px;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            align-self: flex-start;
        }

        .profile-form button:hover {
            background-color: #0056b3;
        }

        #errupdate {
            margin-top: 10px;
            font-size: 16px;
            font-weight: bold;
        } 


        @media only screen and (max-width:800px){
            .theflexdiv{
                display:none;
            }  

            .profile-form-container{
                min-width:100px;
            }
        }      
    </style>
</head>

<body>

    <!---Navigation starts--->
    <div class="enclose">
        <%- include('../partials/navbar.ejs') %>

        <!----Homebar start-->
        <div class="homebar">
            <p class='big'>PROFILE SETTINGS</p>
            <p class="small">Update your profile information below</p>
            <div style='display:flex'> <a href='/'>Go Home</a> <i class="fa fa-long-arrow-right"></i> </div>
        </div>
        <!----Homebar end-->
    </div>
    <!---Navigation ends---> 

 <div class='theflex'>  
    <div class="profile-form-container">
        <h1>Profile Settings</h1>
        <form id="profileForm" class="profile-form">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" value="<%=user.reguser%>" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" value="<%=user.regemail%>" required>
            </div>
            <div class="form-group">
                <label for="firstName">First Name:</label>
                <input type="text" id="firstName" name="firstName" value="<%=user.firstname%>" required>
            </div>
            <div class="form-group">
                <label for="lastName">Last Name:</label>
                <input type="text" id="lastName" name="lastName" value="<%=user.lastname%>" required>
            </div>
            <div class="form-group">
                <label for="password">New Password:</label>
                <input type="password" id="password" name="password" placeholder="New Password" required>
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm Password:</label>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password" required>
            </div>
            <p id="errupdate"></p>
            <button id="updateButton">Update Changes</button>
        </form>
    </div>  


    <div class="theflexdiv">
        <i class="fa fa-user"></i>
    </div>

 </div>

    <%- include('../partials/footer.ejs') %>

    <script>
        var profileForm = document.getElementById('profileForm');
        profileForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            let username = document.getElementById('username').value;
            let email = document.getElementById('email').value;
            let firstName = document.getElementById('firstName').value;
            let lastName = document.getElementById('lastName').value;
            let password = document.getElementById('password').value;
            let confirmPassword = document.getElementById('confirmPassword').value;
            let updateButton = document.getElementById('updateButton');
            let updateError = document.getElementById('errupdate'); 

            function validatePassword() {
            if (password.search(/[a-z]/) < 0) {
                updateError.innerHTML = 'Incomplete! Password must contain lowercase character';
                updateError.style.color = 'red';
                return false;
            } 
            if (password.search(/[A-Z]/) < 0) {
                updateError.innerHTML = 'Incomplete! Password must contain uppercase character';
                updateError.style.color = 'red';
                return false;
            }
            if (password.search(/[0-9]/) < 0) {
                updateError.innerHTML = 'Invalid! Password must contain number';
                updateError.style.color = 'red';
                return false;
            }
            if (password.search(/[!@#^&*$Â£%]/) < 0) {
                updateError.innerHTML = 'Password must contain at least one symbol';
                updateError.style.color = 'red';
                return false;
            }
            if (password.length < 8) {
                updateError.innerHTML = 'Oops! Password is too short and weak';
                updateError.style.color = 'red';
                return false;
            }
            if (password.length > 24) {
                updateError.innerHTML = 'Oops! Password is too long';
                updateError.style.color = 'red';
                return false;
            }
            updateError.innerHTML = 'Password is strong';
            updateError.style.color = 'green';
            return true;
        }

        function validateConfirmPassword() {
            if (password !== confirmPassword) {
                updateError.innerHTML = 'Fields must be of same value';
                updateError.style.color = 'red';
                return false;
            } 
            updateError.innerHTML = 'Perfect';
            updateError.style.color = 'green';
            return true;
        }



            // Clear any previous error messages
            updateError.innerHTML = '';
            updateError.style.color = 'inherit';

            if (!validatePassword() || !validateConfirmPassword()) {
                return;
            }

            updateButton.innerHTML = 'Processing';
            updateButton.style.opacity = '0.855';

            const updateData = {
                username: username,
                email: email,
                firstName: firstName,
                lastName: lastName,
                password: password,
            };

            try {
                const response = await fetch('/updateProfile', {
                    method: 'post',
                    body: JSON.stringify(updateData),
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                });

                if (!response.ok) {
                    updateButton.innerHTML = 'Update Changes';
                    throw response;
                }
                updateButton.style.opacity = '1';
                const result = await response.json();
                updateError.innerHTML = 'Profile updated successfully';
                updateError.style.color = 'grey';

                setTimeout(() => {
                    updateError.innerHTML = 'Redirecting...';
                }, 1000);

                setTimeout(() => {
                    window.location.href = '/dashboard';
                }, 3000);

            } catch (error) {
                const errResult = await error.text();
                updateError.innerHTML = errResult;
                updateError.style.color = 'red';
            }
        });
    </script>
</body>

</html>
